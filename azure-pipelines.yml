# Maven


# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
variables:
- name: BuildId
  value: $(Build.BuildId)

- name: View
  value: "artifacts"

- name: PathAsName
  value: "false"

- name: ArtifactType
  value: "publishedArtifacts"  

trigger:
- master

pool:
  vmImage: windows-latest
steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    publishJUnitResults: true
    testResultsFiles: '**/index.html'
    goals: clean verify
- task: PowerShell@2
  condition: always()
  inputs:
    targetType: 'inline'
    script: 'Write-Host "##vso[task.uploadfile]$(System.DefaultWorkingDirectory)/pom.xml"'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/target/site/serenity/serenity-summary.html'
    publishLocation: 'pipeline'
    artifact: 'Summary'
- task: PublishPipelineArtifact@1
  condition: always()
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/target/site'
    artifact: 'Report'
    publishLocation: 'pipeline'
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $body ='{
          "@type" : "MessageCard",
          "@context" : "http://schema.org/extensions",
          "summary": "Test",
          "title" : "Test Automation Status",
          "potentialAction" : [{
                  "@type" : "OpenUri",
                  "name" : "View Test Results",
                  "targets" : [{
                          "os" : "default",
                          "uri" : "$(System.CollectionUri)/SerenityTest/_build/results?buildId=$(Build.BuildId)&view=$(View)&pathAsName=$(PathAsName)&type=$(ArtifactType)"
                      }]
                  }]

      }' 
      
      $webhookUrl = "https://netorg687836.webhook.office.com/webhookb2/79c3885e-dc10-4a47-87e3-fdbca374fc14@95d6ea62-1835-4b99-af66-819b95a80808/IncomingWebhook/00976fad75334de2b745409a68d5264d/0ca36e7e-aaaf-44cf-8a22-2b943671afd0"
      $headers = @{
          "Content-Type" = "application/json"
      }
      Invoke-RestMethod -Uri $webhookUrl -Method Post -Headers $headers -Body $body
  
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      name: Read Serenity Report
          shell: pwsh
          run: |
           $fileContent = Get-Content "C:\Users\harishkumar.r\Desktop\summary.txt"
      
            # Initialize variables to store the data
            $reportGenerated = ""
            $testCases = 0
            $passed = 0
            $failed = 0
            $failedWithErrors = 0
            $compromised = 0
            $pending = 0
            $ignored = 0
            $skipped = 0
      
            # Process each line in the file
            foreach ($line in $fileContent) {
                # Match the line that contains the report generation date
                if ($line -match "^Serenity report generated (.+)$") {
                    $reportGenerated = $Matches[1].Trim()
                }
      
                # Match lines containing test case counts
                if ($line -match "^Test Cases:\s+(\d+)$") {
                    $testCases = [int]$Matches[1]
                }
      
                # Match lines containing passed test cases count
                if ($line -match "^Passed:\s+(\d+)$") {
                    $passed = [int]$Matches[1]
                }
      
                # Match lines containing failed test cases count
                if ($line -match "^Failed:\s+(\d+)$") {
                    $failed = [int]$Matches[1]
                }
      
                # Match lines containing failed with errors count
                if ($line -match "^Failed with errors:\s+(\d+)$") {
                    $failedWithErrors = [int]$Matches[1]
                }
      
                # Match lines containing compromised count
                if ($line -match "^Compromised:\s+(\d+)$") {
                    $compromised = [int]$Matches[1]
                }
      
                # Match lines containing pending count
                if ($line -match "^Pending:\s+(\d+)$") {
                    $pending = [int]$Matches[1]
                }
      
                # Match lines containing ignored count
                if ($line -match "^Ignored:\s+(\d+)$") {
                    $ignored = [int]$Matches[1]
                }
      
                # Match lines containing skipped count
                if ($line -match "^Skipped:\s+(\d+)$") {
                    $skipped = [int]$Matches[1]
                }
            }
      
            # Output the extracted data (optional)
            Write-Host "Report Generated: $reportGenerated"
            Write-Host "Test Cases: $testCases"
            Write-Host "Passed: $passed"
            Write-Host "Failed: $failed"
            Write-Host "Failed with errors: $failedWithErrors"
            Write-Host "Compromised: $compromised"
            Write-Host "Pending: $pending"
            Write-Host "Ignored: $ignored"
            Write-Host "Skipped: $skipped"